{
  "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-classic\" data-lake-element=\"root\"><h3 id=\"9cdb3b71\" data-lake-id=\"18925696c451cbe6a3b5028f49065dcb\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">区别：</h3><p data-lake-id=\"1088c84317d0fd3ee2819c0cbc991a63\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7a890aaba3ec6151b98b46d30a9d4920\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">urlencode把空格编码为 '+'， rawurlencode()把空格编码为 '%20'</p><p data-lake-id=\"0db56ba3411096978aafd18ba2f5b27b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5d05778310244d4986b162b401451f8a\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">urldecode() 会把 '+' 破解为空格，rawurldecode() 不会</p><p data-lake-id=\"af90677e5e6a8497624ed660b1700297\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"138a6766\" data-lake-id=\"921f30a1628be9420e3f41db1c4be9cb\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">注意</h3><p data-lake-id=\"db4a9458843fab90092c82e5ebfa0a72\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"83f6acf95c586455804b0d5fea07e030\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">因为'+' 号是 base64的编码字符，当urldecode与base64_decode配合使用时，要用rawurldecode()</p><p data-lake-id=\"1e30290301cd61b6febb488817a4820b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a39981dd85afa77c4d938aa77556b679\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">推荐在PHP中使用用rawurlencode。弃用urlencode;</p><p data-lake-id=\"6c16f02a4fa9d48595f7b7578d59ffd4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">\n大部分使用场景下都适合使用rawurlencode()</p><p data-lake-id=\"e905f403a0b6785e6775fc4a7194a00b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"535983334fef5312f041f6387cd85f0e\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">url中base64之后的参数 &nbsp;一定要rawurlencode, 因为base64之后的字符串会包含\"+\" \"/\" 等特殊字符(此时base64可以替换为urlbase64，也可以解决这个问题)</p><p data-lake-id=\"50ae1e98307813f32cb1347b7a770d7f\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"6c5beeb2f81015b4f7d59d6cc402e3e1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">超全局变量 $<em>GET 和 $</em>REQUEST 已经被解码了。对 $<em>GET 或 $</em>REQUEST 里的元素使用 urldecode() 将会导致不可预计和危险的结果，即接受urlencode转义的请求时不需要urldecode转义。其他的如$_POST等请求则需要自己转义</p></div>",
  "slug": 6043729,
  "title": "urldecode & rawurldecode 说明"
}