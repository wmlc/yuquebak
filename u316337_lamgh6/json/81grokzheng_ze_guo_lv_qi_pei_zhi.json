{
  "body_html": "\n\n  \n    8.1、grok正则过滤器配置\n    \n    \n    \n    \n    \n  <link href=\"https://www.yuque.com/attachments/yuque/0/2020/css/491128/1588213910235-976bcd3a-7a9c-473d-b800-1b1df54807d4.css\" rel=\"stylesheet\" type=\"text/css\" />\n<link href=\"https://www.yuque.com/attachments/yuque/0/2020/css/491128/1588213910286-64db0dd0-ac29-46fb-9241-76ef318b1b53.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n  \n        \n<div class=\"page\">\n    \n        <h1 class=\"book-chapter\" id=\"calibre_toc_21\">8.1、grok正则过滤器配置</h1>\n        <div class=\"section\">\n            <h1 id=\"81、grok正则过滤器配置\" class=\"calibre7\">8.1、grok正则过滤器配置</h1>\n<h2 id=\"811、简介\" class=\"calibre8\">8.1.1、简介</h2>\n<p class=\"calibre12\">grok用于将任意的文本进行结构化处理。\ngrok是目前logstash中将混乱的非结构日子数据，进行结构化的最好方式。\n用这个工具来解析syslog日志，apache或其他webserver日志，mysql日志的效果非常好。通常来说，只要这个日志是给人员阅读的而不是给机器处理的日志，不管什么格式Grok都适用。</p>\n<p class=\"calibre12\">Logstash定义120多种默认的模式，可以在github上找到详细的信息：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns\n</code></pre><p class=\"calibre12\">当然你也可以添加属于你自己的模式。\n如果你在创建模式匹配自己的日志时需要帮助，可以访问<a href=\"http://grokdebug.herokuapp.com\" target=\"_blank\" class=\"pcalibre pcalibre2 pcalibre1 calibre20\">http://grokdebug.herokuapp.com</a> 和 <a href=\"http://grokconstructor.appspot.com/\" target=\"_blank\" class=\"pcalibre pcalibre2 pcalibre1 calibre20\">http://grokconstructor.appspot.com/</a> 里的帮助信息。</p>\n<h2 id=\"812、grok基础\" class=\"calibre13\">8.1.2、grok基础</h2>\n<p class=\"calibre12\">Grok通过文本模式来匹配你的log\ngrok模式的语法是：%{SYNTAX:SEMANTIC}\nSANTAX是用于匹配目标文本的模式的名称。例如，3.44对应的模式是NUMBER；55.3.244.1对应的模式是IP。syntax用来描述如何匹配。</p>\n<p class=\"calibre12\">SEMANTIC 用来标识被匹配的文本片段，如：3.44是时间的间隔时间，可以简称为duration，进一步的，字符串55.3.244.1 或许可以用来标志正在发起请求的客户端，可以简称为client。</p>\n<p class=\"calibre12\">对于上边的例子，你的grok过滤器可以编写成这样：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">%{NUMBER:duration} %{IP:client}\n</code></pre><p class=\"calibre12\">你可以随意的给你的grok模式增加数据转换类型。默认的所有的语义（semantics）都以字符串形式保存。如果你愿意转换semantic的数据类型，例如将字符串型转换成整型，可以通过添加标识目标数据类型的后缀来实现。例如：%{NUMBER:num:int},这里将SEMANTIC名称为num的数据从字符串类型转换为整型。目前只支持将数据转换成int或float</p>\n<p class=\"calibre12\">例如：按照syntax和semantic的概念，我们可以从这些简单的日志中，拆解出有用的字段。</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">55.3.244.1 GET /index.html 15824 0.043\n</code></pre><p class=\"calibre12\">与之对应的模式可以设置为：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">%{IP:client} %{WORD:method} %{URIPATHPARM:request} %{NUMBET:byte} %{NUMBER:duration}\n</code></pre><p class=\"calibre12\">让我们再看一个更真实的例子：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">input{\n  file{\n    path=&gt;\"/var/log/http.log\"\n  }\n\n  filter{\n    grok{\n      match=&gt;{\"message\" =&gt; \"%{IP:client} %{WORD:,method} %{URIPATHARAM:request} %{NUMBER:bytes} %{NUMBER:duration}\"}\n    }\n\n  }\n\n}\n</code></pre><p class=\"calibre12\">经过上面的grob 过滤器的处理，事件会增加一些额外的字段。</p>\n<ul class=\"calibre17\">\n<li class=\"calibre18\"><code class=\"pcalibre5 pcalibre6 calibre19\">client:55.3.244.1</code></li>\n<li class=\"calibre18\"><code class=\"pcalibre5 pcalibre6 calibre19\">method:GET</code></li>\n<li class=\"calibre18\"><code class=\"pcalibre5 pcalibre6 calibre19\">request:/index.html</code></li>\n<li class=\"calibre18\"><code class=\"pcalibre5 pcalibre6 calibre19\">bytes: 15824</code></li>\n<li class=\"calibre18\"><code class=\"pcalibre5 pcalibre6 calibre19\">duration: 0.043</code></li>\n</ul>\n<h2 id=\"regular-expressions\" class=\"calibre13\">Regular Expressions</h2>\n<p class=\"calibre12\">Grob 是在正则表达式的基础上实现的，因此所有正则表达式的语法在grok中都是有效的。正则表达式的库是Oniguruma，在Oniguruma的站点有你可看到所有正则表达式所支持的语法。</p>\n<h2 id=\"自定义模式\" class=\"calibre13\">自定义模式</h2>\n<p class=\"calibre12\">有时候logstash的默认模式中不能满足你的需求，那么你有以下选择：\n首先，你可以使用命名的Oniguruma语法获取匹配的文本片，并将它作为一个字段进行保存：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">（?&lt;field_name&gt;the pattern here）\n</code></pre><p class=\"calibre12\">例如，日志的后缀中有一个队列id的字段，是一个10位或11位的16进制的值。可以通过如下方法获取这个值：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">(?&lt;queue_id&gt;[0-9A-F]{10,11})\n</code></pre><p class=\"calibre12\">或者，你可以创建自定义的模式文件。</p>\n<ul class=\"calibre17\">\n<li class=\"calibre18\"><p class=\"calibre12\">创建一个名为patterns的文件夹在其中创建一个名为extra的文件（文件的名字可以命名为其他名字，但建议这个名字对创建者是有意义的）</p>\n</li>\n<li class=\"calibre18\"><p class=\"calibre12\">在那个文件中，写你所需要的模式作为模式名，之后紧跟一个空格，之后是对应该模式的正则表达式。</p>\n</li>\n</ul>\n<p class=\"calibre12\">例如，以前面描述的后缀队列id为例。</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\"># contents of ./patterns/postfix:\nPOSTFIX_QUEUEID [0-9A-F]]\n</code></pre><p class=\"calibre12\">接下来需要在插件中通过patterns_dir参数设置，告诉Logstash自定义模式文件夹的位置。这里一个完整的例子。</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">Jan  1 06:25:43 mailserver14 postfix/cleanup[21403]: BEF25A72965: message-id=&lt;20130101142543.5828399CCAF@mailserver14.example.com&gt;\n</code></pre><pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">filter{\n  grok{\n    patterns_dir =&gt; [\"./patterns\"]\n    match =&gt; { \"message\" =&gt; \"%{SYSLOGBASE} %{POSTFIX_QUEUEID:queue_id}: %{GREEDYDATA:syslog_message}\" }\n  }\n}\n</code></pre><p class=\"calibre12\">这个过滤器可以把日志拆分成以下字段：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">timestamp: Jan 1 06:25:43\nlogsource: mailserver14\nprogram: postfix/cleanup\npid: 21403\nqueue_id: BEF25A72965\nsyslog_message: message-id=&lt;20130101142543.5828399CCAF@mailserver14.example.com&gt;\n</code></pre><p class=\"calibre12\">timestamp, logsource, program, 和 pid 字段的定义来自于SYSLOGBASE 模式，它是在另一个模式中定义的。</p>\n<h2 id=\"概要——synopsis\" class=\"calibre13\">概要——Synopsis</h2>\n<p class=\"calibre12\">这个插件支持下列配置选项：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">grok{\n\n}\n</code></pre><table class=\"calibre22\">\n<thead class=\"calibre23\">\n<tr class=\"calibre24\">\n<th class=\"calibre25\">Setting</th>\n<th class=\"calibre25\">Input type</th>\n<th class=\"calibre25\">Required</th>\n<th class=\"calibre25\">Default value</th>\n<th class=\"calibre25\">Detail</th>\n</tr>\n</thead>\n<tbody class=\"calibre26\">\n<tr class=\"calibre24\">\n<td class=\"calibre27\">add-field</td>\n<td class=\"calibre27\">hash</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">{}</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre28\">\n<td class=\"calibre27\">add_tag</td>\n<td class=\"calibre27\">array</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">[]</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre24\">\n<td class=\"calibre27\">break_on_match</td>\n<td class=\"calibre27\">boolean</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">true</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre28\">\n<td class=\"calibre27\">keep_empty_captures</td>\n<td class=\"calibre27\">boolean</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">false</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre24\">\n<td class=\"calibre27\">match</td>\n<td class=\"calibre27\">hash</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">{}</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre28\">\n<td class=\"calibre27\">named_captures_only</td>\n<td class=\"calibre27\">boolean</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">true</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre24\">\n<td class=\"calibre27\">overwrite</td>\n<td class=\"calibre27\">array</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">[]</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre28\">\n<td class=\"calibre27\">patterns_dir</td>\n<td class=\"calibre27\">array</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">[]</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre24\">\n<td class=\"calibre27\">patterns_files_glob</td>\n<td class=\"calibre27\">string</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">false</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre28\">\n<td class=\"calibre27\">periodic_flush</td>\n<td class=\"calibre27\">boolean</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">false</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre24\">\n<td class=\"calibre27\">remove_field</td>\n<td class=\"calibre27\">array</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">[]</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre28\">\n<td class=\"calibre27\">remove_tag</td>\n<td class=\"calibre27\">array</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">[]</td>\n<td class=\"calibre27\">\n</td></tr>\n<tr class=\"calibre24\">\n<td class=\"calibre27\">tag_on_failure</td>\n<td class=\"calibre27\">array</td>\n<td class=\"calibre27\">No</td>\n<td class=\"calibre27\">[\"_grokparsefailure\"]</td>\n</tr>\n</tbody>\n</table>\n\n        </div>\n    \n</div>\n\n        \n    \n\n\n\n",
  "slug": 6588823,
  "title": "81grokzheng_ze_guo_lv_qi_pei_zhi"
}