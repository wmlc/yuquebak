{
  "body_html": "\n\n  \n    grok 插件的属性\n    \n    \n    \n    \n    \n  <link href=\"https://www.yuque.com/attachments/yuque/0/2020/css/491128/1588213910235-976bcd3a-7a9c-473d-b800-1b1df54807d4.css\" rel=\"stylesheet\" type=\"text/css\" />\n<link href=\"https://www.yuque.com/attachments/yuque/0/2020/css/491128/1588213910286-64db0dd0-ac29-46fb-9241-76ef318b1b53.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n  \n        \n<div class=\"page\">\n    \n        <h1 class=\"book-chapter\">grok 插件的属性</h1>\n        <div class=\"section\">\n            <h1 id=\"grok-插件的属性\" class=\"calibre7\">grok 插件的属性</h1>\n<h2 id=\"1、addfield属性\" class=\"calibre8\">1、add_field属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：hash</li>\n<li class=\"calibre18\">默认值：{}</li>\n<li class=\"calibre18\">描述：\n  在文档（document）中增加一个 field，可以通过%{field}动态命名field名或field的值。</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">filter {\n  grok {\n    add_field =&gt; {\n      \"foo_%{somefield}\" =&gt; \"Hello world, from %{host}\"\n      \"new_field\" =&gt; \"new_static_value\"\n    }\n  }\n}\n</code></pre><h2 id=\"2、addtag属性\" class=\"calibre13\">2、add_tag属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：array</li>\n<li class=\"calibre18\">默认值：[]</li>\n<li class=\"calibre18\">描述：该属性的作用是在，tags中加入一个值，可以使用动态标签来加入，也可以一次加入多个tags值。</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">filter {\n  grok {\n    add_tag =&gt; [ \"foo_%{somefield}\" ]\n  }\n}\n</code></pre><pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\"># You can also add multiple tags at once:\nfilter {\n  grok {\n    add_tag =&gt; [ \"foo_%{somefield}\", \"taggedy_tag\"]\n  }\n}\n</code></pre><h2 id=\"breakonmatch属性\" class=\"calibre13\">break_on_match属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：boolean</li>\n<li class=\"calibre18\">默认值：true</li>\n<li class=\"calibre18\">描述：用于标识匹配后，是否停止此次filter后续的处理逻辑，默认值是ture，意为会停止。</li>\n</ul>\n<h2 id=\"keepemptycaptures属性\" class=\"calibre13\">keep_empty_captures属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的属性：boolean</li>\n<li class=\"calibre18\">默认值：false</li>\n<li class=\"calibre18\">描述：If true, keep empty captures as event fields.\n作用还不清楚</li>\n</ul>\n<h2 id=\"match属性\" class=\"calibre13\">match属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的属性：hash</li>\n<li class=\"calibre18\">默认值：{}</li>\n<li class=\"calibre18\">描述：用于描述正则表达式</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">filter \n{\n    grok \n    { \n        match =&gt; \n        { \n            \"message\" =&gt; \n            [ \n                \"Duration: %{NUMBER:duration}\", \n                \"Speed: %{NUMBER:speed}\" \n            ] \n        } \n\n    }\n}\n</code></pre><h2 id=\"namedcapturesonly\" class=\"calibre13\">named_captures_only</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：boolean</li>\n<li class=\"calibre18\">默认值：true</li>\n<li class=\"calibre18\">描述：If true, only store named captures from grok.</li>\n</ul>\n<h2 id=\"overwrite\" class=\"calibre13\">overwrite</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值得类型：array</li>\n<li class=\"calibre18\">默认值：[]</li>\n<li class=\"calibre18\">描述:用新生成的值来覆盖原有field的值。</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">filter {\n  grok {\n    match =&gt; { \"message\" =&gt; \"%{SYSLOGBASE} %{DATA:message}\" }\n    overwrite =&gt; [ \"message\" ]\n  }\n}\n</code></pre><p class=\"calibre12\">如果日志是<code class=\"pcalibre5 pcalibre6 calibre19\">May 29 16:37:11 sadness logger: hello world</code>经过match属性<code class=\"pcalibre5 pcalibre6 calibre19\">match =&gt; { \"message\" =&gt; \"%{SYSLOGBASE} %{DATA:message}\" }</code>处理后，message的值变成了<code class=\"pcalibre5 pcalibre6 calibre19\">hello world</code>。这时如果使用了<code class=\"pcalibre5 pcalibre6 calibre19\">overwrite =&gt; [ \"message\" ]</code>属性，那么原来的message的值将被覆盖成新值。</p>\n<h2 id=\"patternsdir-属性\" class=\"calibre13\">patterns_dir 属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：array</li>\n<li class=\"calibre18\">默认值：[]</li>\n<li class=\"calibre18\">描述：一些复杂的正则表达式，不适合直接写到filter中，可以指定一个文件夹，用来专门保存正则表达式的文件，需要注意的是该文件夹中的所有文件中的正则表达式都会被依次加载，包括备份文件。</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">patterns_dir =&gt; [\"/opt/logstash/patterns\", \"/opt/logstash/extra_patterns\"]\n</code></pre><p class=\"calibre12\">正则文件以文本格式描述：</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">NAME PATTERN\n#空格前是正则表达式的名称，空格后是具体的正则表达式\n</code></pre><p class=\"calibre12\">例如：这是一个数字的表达式</p>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\">NUMBER \\d+\n</code></pre><h2 id=\"patternsfileglob属性\" class=\"calibre13\">patterns_file_glob属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：string</li>\n<li class=\"calibre18\">默认值：“*”</li>\n<li class=\"calibre18\">描述：针对patterns_dir属性中指定的文件夹里哪些正则文件，可以在这个filter中生效，需要本属性来指定。默认值“*”是指所有正则文件都生效。</li>\n</ul>\n<h2 id=\"periodicflush属性\" class=\"calibre13\">periodic_flush属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：boolean</li>\n<li class=\"calibre18\">默认值：false</li>\n<li class=\"calibre18\">描述：如果设置为ture，会定时的调用filter的更新函数（flush method）</li>\n</ul>\n<h2 id=\"removefield\" class=\"calibre13\">remove_field</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：array</li>\n<li class=\"calibre18\">默认值：[]</li>\n<li class=\"calibre18\">描述：删除当前文档中的指定filted</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\"># You can also remove multiple fields at once:\nfilter \n{\n    grok \n    {\n        remove_field =&gt; \n        [ \n            \"foo_%{somefield}\", \n            \"my_extraneous_field\" \n        ]\n    }\n}\n</code></pre><h2 id=\"removetag属性\" class=\"calibre13\">remove_tag属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：array</li>\n<li class=\"calibre18\">默认值：[]</li>\n<li class=\"calibre18\">描述：删除指定的tag值</li>\n</ul>\n<pre class=\"calibre10\"><code class=\"pcalibre4 pcalibre3 calibre11\"># You can also remove multiple tags at once:\nfilter {\n  grok {\n    remove_tag =&gt; [ \"foo_%{somefield}\", \"sad_unwanted_tag\"]\n  }\n}\n</code></pre><h2 id=\"tagonfailure属性\" class=\"calibre13\">tag_on_failure属性</h2>\n<ul class=\"calibre17\">\n<li class=\"calibre18\">值的类型：array</li>\n<li class=\"calibre18\">默认值：[\"_grokparsefailure\"]</li>\n<li class=\"calibre18\">描述：如果所有正则规则都没有匹配，则在tags中追加该值。</li>\n</ul>\n\n        </div>\n    \n</div>\n\n        \n    \n\n\n\n",
  "slug": 6588893,
  "title": "grok_cha_jian_de_shu_xing"
}